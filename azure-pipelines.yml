# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 8d0eba92-408e-4dcb-9540-400b1c904c11
  kubernetesServiceConnection: b32d7590-0a26-41d0-befb-dc448e93fb1b
  k8sNamespace: default
  azureContainerRegistry: acrprod0327.azurecr.io
  azureSubscriptionEndpoint: scn-arm0509
  tag: $(Build.BuildId)
  imagePullSecret: patron-auth

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DockerCompose@0
        displayName: Container registry login
        inputs:
          containerregistrytype: Azure Container Registry
          azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
          azureContainerRegistry: $(azureContainerRegistry)
          dockerComposeCommand: rm --all

      - task: DockerCompose@0
        displayName: Run a Docker Compose command
        inputs:
          action: Run a Docker Compose command
          azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
          azureContainerRegistry: $(azureContainerRegistry)
          dockerComposeFile: docker-compose.yml
          projectName: $(Build.Repository.Name)
          qualifyImageNames: true
          dockerComposeCommand: build
  
    # ACR로 이미지 푸시하기
      - task: DockerCompose@0
        displayName: Docker Compose Push services
        inputs:
          action: Push services
          azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
          azureContainerRegistry: $(azureContainerRegistry)
          dockerComposeFile: docker-compose.yml
          projectName: $(Build.Repository.Name)
          qualifyImageNames: true
          includeLatestTag: true

      - task: PublishPipelineArtifact@1
        displayName: manifests definition
        inputs:
          artifactName: 'manifests'
          path: 'manifests'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'env-aks0404' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/nginx_deployment.yml
                $(System.ArtifactsDirectory)/manifests/nginx_service.yml
                $(System.ArtifactsDirectory)/manifests/spring_deployment.yml
                $(System.ArtifactsDirectory)/manifests/spring_service.yml
                $(System.ArtifactsDirectory)/manifests/ingress.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)